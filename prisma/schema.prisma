// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String? 
  role      Role     @default(CUSTOMER)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerProfile SellerProfile?
  reviews       Review[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
}

model SellerProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  displayName String
  bio         String?
  website     String?
  user        User    @relation(fields: [userId], references: [id])
  products    Product[]
}

model Product {
  id          String         @id @default(cuid())
  sellerId    String
  title       String
  slug        String         @unique
  description String
  priceCents  Int
  stock       Int            @default(0)
  status      ProductStatus  @default(DRAFT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  seller      SellerProfile  @relation(fields: [sellerId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  orderItems  OrderItem[]

  @@index([sellerId])
  @@index([priceCents])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?

  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1..5
  body      String
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  totalCents Int
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())

  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]

  @@index([userId])
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  productId       String
  qty             Int
  priceCentsSnap  Int

  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

/*** Auth.js (NextAuth) models ***/
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}